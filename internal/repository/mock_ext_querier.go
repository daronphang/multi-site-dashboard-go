// Code generated by mockery v2.43.0. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockExtQuerier is an autogenerated mock type for the ExtQuerier type
type MockExtQuerier struct {
	mock.Mock
}

type MockExtQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtQuerier) EXPECT() *MockExtQuerier_Expecter {
	return &MockExtQuerier_Expecter{mock: &_m.Mock}
}

// CreateMachineResourceUsage provides a mock function with given fields: ctx, arg
func (_m *MockExtQuerier) CreateMachineResourceUsage(ctx context.Context, arg CreateMachineResourceUsageParams) (MachineResourceUsage, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateMachineResourceUsage")
	}

	var r0 MachineResourceUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateMachineResourceUsageParams) (MachineResourceUsage, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateMachineResourceUsageParams) MachineResourceUsage); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(MachineResourceUsage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateMachineResourceUsageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExtQuerier_CreateMachineResourceUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMachineResourceUsage'
type MockExtQuerier_CreateMachineResourceUsage_Call struct {
	*mock.Call
}

// CreateMachineResourceUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateMachineResourceUsageParams
func (_e *MockExtQuerier_Expecter) CreateMachineResourceUsage(ctx interface{}, arg interface{}) *MockExtQuerier_CreateMachineResourceUsage_Call {
	return &MockExtQuerier_CreateMachineResourceUsage_Call{Call: _e.mock.On("CreateMachineResourceUsage", ctx, arg)}
}

func (_c *MockExtQuerier_CreateMachineResourceUsage_Call) Run(run func(ctx context.Context, arg CreateMachineResourceUsageParams)) *MockExtQuerier_CreateMachineResourceUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateMachineResourceUsageParams))
	})
	return _c
}

func (_c *MockExtQuerier_CreateMachineResourceUsage_Call) Return(_a0 MachineResourceUsage, _a1 error) *MockExtQuerier_CreateMachineResourceUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExtQuerier_CreateMachineResourceUsage_Call) RunAndReturn(run func(context.Context, CreateMachineResourceUsageParams) (MachineResourceUsage, error)) *MockExtQuerier_CreateMachineResourceUsage_Call {
	_c.Call.Return(run)
	return _c
}

// ExecWithPgTx provides a mock function with given fields: ctx, cb
func (_m *MockExtQuerier) ExecWithPgTx(ctx context.Context, cb func(Querier) (interface{}, error)) func() (interface{}, error) {
	ret := _m.Called(ctx, cb)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithPgTx")
	}

	var r0 func() (interface{}, error)
	if rf, ok := ret.Get(0).(func(context.Context, func(Querier) (interface{}, error)) func() (interface{}, error)); ok {
		r0 = rf(ctx, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() (interface{}, error))
		}
	}

	return r0
}

// MockExtQuerier_ExecWithPgTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecWithPgTx'
type MockExtQuerier_ExecWithPgTx_Call struct {
	*mock.Call
}

// ExecWithPgTx is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(Querier)(interface{} , error)
func (_e *MockExtQuerier_Expecter) ExecWithPgTx(ctx interface{}, cb interface{}) *MockExtQuerier_ExecWithPgTx_Call {
	return &MockExtQuerier_ExecWithPgTx_Call{Call: _e.mock.On("ExecWithPgTx", ctx, cb)}
}

func (_c *MockExtQuerier_ExecWithPgTx_Call) Run(run func(ctx context.Context, cb func(Querier) (interface{}, error))) *MockExtQuerier_ExecWithPgTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(Querier) (interface{}, error)))
	})
	return _c
}

func (_c *MockExtQuerier_ExecWithPgTx_Call) Return(_a0 func() (interface{}, error)) *MockExtQuerier_ExecWithPgTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExtQuerier_ExecWithPgTx_Call) RunAndReturn(run func(context.Context, func(Querier) (interface{}, error)) func() (interface{}, error)) *MockExtQuerier_ExecWithPgTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetAggregatedMachineResourceUsage provides a mock function with given fields: ctx, arg
func (_m *MockExtQuerier) GetAggregatedMachineResourceUsage(ctx context.Context, arg GetAggregatedMachineResourceUsageParams) ([]GetAggregatedMachineResourceUsageRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregatedMachineResourceUsage")
	}

	var r0 []GetAggregatedMachineResourceUsageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetAggregatedMachineResourceUsageParams) ([]GetAggregatedMachineResourceUsageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetAggregatedMachineResourceUsageParams) []GetAggregatedMachineResourceUsageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GetAggregatedMachineResourceUsageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetAggregatedMachineResourceUsageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExtQuerier_GetAggregatedMachineResourceUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregatedMachineResourceUsage'
type MockExtQuerier_GetAggregatedMachineResourceUsage_Call struct {
	*mock.Call
}

// GetAggregatedMachineResourceUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetAggregatedMachineResourceUsageParams
func (_e *MockExtQuerier_Expecter) GetAggregatedMachineResourceUsage(ctx interface{}, arg interface{}) *MockExtQuerier_GetAggregatedMachineResourceUsage_Call {
	return &MockExtQuerier_GetAggregatedMachineResourceUsage_Call{Call: _e.mock.On("GetAggregatedMachineResourceUsage", ctx, arg)}
}

func (_c *MockExtQuerier_GetAggregatedMachineResourceUsage_Call) Run(run func(ctx context.Context, arg GetAggregatedMachineResourceUsageParams)) *MockExtQuerier_GetAggregatedMachineResourceUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetAggregatedMachineResourceUsageParams))
	})
	return _c
}

func (_c *MockExtQuerier_GetAggregatedMachineResourceUsage_Call) Return(_a0 []GetAggregatedMachineResourceUsageRow, _a1 error) *MockExtQuerier_GetAggregatedMachineResourceUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExtQuerier_GetAggregatedMachineResourceUsage_Call) RunAndReturn(run func(context.Context, GetAggregatedMachineResourceUsageParams) ([]GetAggregatedMachineResourceUsageRow, error)) *MockExtQuerier_GetAggregatedMachineResourceUsage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMachineResourceUsage provides a mock function with given fields: ctx, arg
func (_m *MockExtQuerier) UpdateMachineResourceUsage(ctx context.Context, arg UpdateMachineResourceUsageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMachineResourceUsage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateMachineResourceUsageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExtQuerier_UpdateMachineResourceUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMachineResourceUsage'
type MockExtQuerier_UpdateMachineResourceUsage_Call struct {
	*mock.Call
}

// UpdateMachineResourceUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateMachineResourceUsageParams
func (_e *MockExtQuerier_Expecter) UpdateMachineResourceUsage(ctx interface{}, arg interface{}) *MockExtQuerier_UpdateMachineResourceUsage_Call {
	return &MockExtQuerier_UpdateMachineResourceUsage_Call{Call: _e.mock.On("UpdateMachineResourceUsage", ctx, arg)}
}

func (_c *MockExtQuerier_UpdateMachineResourceUsage_Call) Run(run func(ctx context.Context, arg UpdateMachineResourceUsageParams)) *MockExtQuerier_UpdateMachineResourceUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateMachineResourceUsageParams))
	})
	return _c
}

func (_c *MockExtQuerier_UpdateMachineResourceUsage_Call) Return(_a0 error) *MockExtQuerier_UpdateMachineResourceUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExtQuerier_UpdateMachineResourceUsage_Call) RunAndReturn(run func(context.Context, UpdateMachineResourceUsageParams) error) *MockExtQuerier_UpdateMachineResourceUsage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExtQuerier creates a new instance of MockExtQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtQuerier {
	mock := &MockExtQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
