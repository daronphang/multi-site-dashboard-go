// Code generated by mockery v2.43.0. DO NOT EDIT.

package usecase

import (
	context "context"
	domain "multi-site-dashboard-go/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishMachineResourceUsageEvent provides a mock function with given fields: ctx, arg
func (_m *MockEventPublisher) PublishMachineResourceUsageEvent(ctx context.Context, arg domain.CreateMachineResourceUsageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for PublishMachineResourceUsageEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateMachineResourceUsageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventPublisher_PublishMachineResourceUsageEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMachineResourceUsageEvent'
type MockEventPublisher_PublishMachineResourceUsageEvent_Call struct {
	*mock.Call
}

// PublishMachineResourceUsageEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg domain.CreateMachineResourceUsageParams
func (_e *MockEventPublisher_Expecter) PublishMachineResourceUsageEvent(ctx interface{}, arg interface{}) *MockEventPublisher_PublishMachineResourceUsageEvent_Call {
	return &MockEventPublisher_PublishMachineResourceUsageEvent_Call{Call: _e.mock.On("PublishMachineResourceUsageEvent", ctx, arg)}
}

func (_c *MockEventPublisher_PublishMachineResourceUsageEvent_Call) Run(run func(ctx context.Context, arg domain.CreateMachineResourceUsageParams)) *MockEventPublisher_PublishMachineResourceUsageEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateMachineResourceUsageParams))
	})
	return _c
}

func (_c *MockEventPublisher_PublishMachineResourceUsageEvent_Call) Return(_a0 error) *MockEventPublisher_PublishMachineResourceUsageEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventPublisher_PublishMachineResourceUsageEvent_Call) RunAndReturn(run func(context.Context, domain.CreateMachineResourceUsageParams) error) *MockEventPublisher_PublishMachineResourceUsageEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
