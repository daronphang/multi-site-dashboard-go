package uc

import (
	"context"
	"errors"
	repo "multi-site-dashboard-go/internal/repository"
)

// When importing domain models for UseCase to implement/return,
// it is safe to import base models generated by sqlc in repository/models.

type UseCaseService struct {
	Repository repo.Querier
}

func NewUseCaseService(repo repo.Querier) *UseCaseService {
	return &UseCaseService{Repository: repo}
}

func (s *UseCaseService) GetTimeSeriesMachineResourceUsageRT(ctx context.Context, machine string) ([]repo.MachineResourceUsage, error) {
	closure := s.Repository.ExecWithPgTx(ctx, func(qtx repo.Querier) (interface{}, error) {
		rv, err := qtx.GetMachineResourceUsage(ctx, machine)
		if err != nil {
			return nil, err
		}
		return rv, err
	})
	i, err := closure()
	if err != nil {
		return nil, err
	}

	rv, ok := i.([]repo.MachineResourceUsage)
	if !ok {
		return nil, errors.New("interface conversion for MachineResourceUsage is invalid")
	}

	return rv, nil
}

func (s *UseCaseService) TestSuccessPgTransaction(ctx context.Context, p repo.CreateMachineResourceUsageParams) (repo.MachineResourceUsage, error) {
	closure := s.Repository.ExecWithPgTx(ctx, func(qtx repo.Querier) (interface{}, error) {		
		rv, err := qtx.CreateMachineResourceUsage(ctx, p)
		if err != nil {
			return nil, err
		}
		
		up := repo.UpdateMachineResourceUsageParams{Machine: p.Machine, Metric1: 99}
		err = qtx.UpdateMachineResourceUsage(ctx, up)
		if err != nil {
			return nil, err
		}
		return rv, err
	})
	rv, err := closure()
	if err != nil {
		return repo.MachineResourceUsage{}, err
	}

	r, ok := rv.(repo.MachineResourceUsage)
	if !ok {
		return repo.MachineResourceUsage{}, errors.New("interface conversion for MachineResourceUsage is invalid")
	}

	return r, nil
}

func (s *UseCaseService) TestFailedPgTransaction(ctx context.Context, p repo.CreateMachineResourceUsageParams) (repo.MachineResourceUsage, error) {
	closure := s.Repository.ExecWithPgTx(ctx, func(qtx repo.Querier) (interface{}, error) {		
		rv, err := qtx.CreateMachineResourceUsage(ctx, p)
		if err != nil {
			return nil, err
		}
		
		up := repo.UpdateMachineResourceUsageParams{Machine: p.Machine, Metric1: -1}
		err = qtx.UpdateMachineResourceUsage(ctx, up)
		if err != nil {
			return nil, err
		}
		return rv, err
	})
	rv, err := closure()
	if err != nil {
		return repo.MachineResourceUsage{}, err
	}

	r, ok := rv.(repo.MachineResourceUsage)
	if !ok {
		return repo.MachineResourceUsage{}, errors.New("interface conversion for MachineResourceUsage is invalid")
	}

	return r, nil
}