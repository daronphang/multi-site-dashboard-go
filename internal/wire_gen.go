// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"github.com/golang-migrate/migrate/v4"
	"github.com/jackc/pgx/v5/pgxpool"
	"go.uber.org/zap"
	"multi-site-dashboard-go/internal/config"
	"multi-site-dashboard-go/internal/database"
)

// Injectors from wire.go:

func WireLogger() (*zap.Logger, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	logger, err := config.ProvideLogger(configConfig)
	if err != nil {
		return nil, err
	}
	return logger, nil
}

func WirePgConnPool(ctx context.Context) (*pgxpool.Pool, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	pool, err := database.ProvidePgConnPool(ctx, configConfig)
	if err != nil {
		return nil, err
	}
	return pool, nil
}

func WirePgMigrateInstance() (*migrate.Migrate, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	driver, err := database.ProvidePgDriver(configConfig)
	if err != nil {
		return nil, err
	}
	migrateMigrate, err := database.ProvidePgMigrateInstance(driver)
	if err != nil {
		return nil, err
	}
	return migrateMigrate, nil
}
